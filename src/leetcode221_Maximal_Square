public class leetcode221_MaximalSquare {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[][] matrix = {{}}
	}
	// let's solve the problem using DP
	public static int maximalSquare(char[][] matrix) {
		if (matrix == null || matrix.length == 0) {
			return 0;
		}
		int max = Integer.MIN_VALUE;
		int rows = matrix.length;
		int cols = matrix[0].length;
		int[][] dp = new int[rows][cols];
		
		// topRow
		for (int i = 0; i < cols; i++) {
			dp[0][i] = matrix[0][i] - '0';
			max = Math.max(max, dp[0][i]);
		}
		//leftCol
		for (int j = 0; j < rows; j++) {
			dp[j][0] = matrix[j][0] - '0';
			max = Math.max(max, dp[j][0]);
		}
		// i > 0 && j > 0
		
		for (int i = 1; i < rows; i++) {
			for (int j = 1; j < cols; j++) {
				if (matrix[i][j] == '1') {
					dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i][j - 1], dp[i - 1][j])) + 1;
					max = Math.max(max, dp[i][j]);
				}
				
			}
		}
		return max*max;
		
		
	}
	
	
}
